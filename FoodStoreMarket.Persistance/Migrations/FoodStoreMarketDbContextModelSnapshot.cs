// <auto-generated />
using System;
using FoodStoreMarket.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodStoreMarket.Persistance.Migrations
{
    [DbContext(typeof(FoodStoreMarketDbContext))]
    partial class FoodStoreMarketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantSpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantSpecificationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6708),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cheese",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6710),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sauce",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6711),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pepper",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6713),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ham",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6715),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mushrooms",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6716),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pineapple",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6509),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 1,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.OpeningClosingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpeningClosingSpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpeningClosingSpecificationId");

                    b.ToTable("OpeningClosingHours");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.OpeningClosingSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantSpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantSpecificationId")
                        .IsUnique();

                    b.ToTable("OpeningClosingSpecifications");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfAccepted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfScheduledDelivery")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductSpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ProductSpecificationId")
                        .IsUnique()
                        .HasFilter("[ProductSpecificationId] IS NOT NULL");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6732),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductSpecificationId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6734),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductSpecificationId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6736),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductSpecificationId = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6737),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductSpecificationId = 4,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6739),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductSpecificationId = 5,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6741),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductSpecificationId = 6,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6742),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductSpecificationId = 7,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.ProductSizeSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductSpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductSpecificationId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductSizeSpecifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7392),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 20.0,
                            ProductSpecificationId = 1,
                            SizeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7398),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 25.0,
                            ProductSpecificationId = 1,
                            SizeId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7400),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 30.0,
                            ProductSpecificationId = 1,
                            SizeId = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7402),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 22.0,
                            ProductSpecificationId = 2,
                            SizeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7404),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 27.0,
                            ProductSpecificationId = 2,
                            SizeId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7405),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 33.0,
                            ProductSpecificationId = 2,
                            SizeId = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7407),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 25.0,
                            ProductSpecificationId = 3,
                            SizeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7408),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 30.0,
                            ProductSpecificationId = 3,
                            SizeId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7410),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 35.0,
                            ProductSpecificationId = 3,
                            SizeId = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7411),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 7.0,
                            ProductSpecificationId = 4,
                            SizeId = 4,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7413),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 9.0,
                            ProductSpecificationId = 4,
                            SizeId = 5,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7414),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 7.0,
                            ProductSpecificationId = 5,
                            SizeId = 4,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 13,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7416),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8.0,
                            ProductSpecificationId = 7,
                            SizeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 14,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7417),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8.0,
                            ProductSpecificationId = 6,
                            SizeId = 6,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 15,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(7419),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10.0,
                            ProductSpecificationId = 6,
                            SizeId = 7,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.ProductSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductSpecifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6758),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Description = "",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PIZZA #1",
                            ProductId = 1,
                            ProductTypeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6761),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Description = "",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PIZZA #2",
                            ProductId = 2,
                            ProductTypeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6762),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Description = "",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "PIZZA #3",
                            ProductId = 3,
                            ProductTypeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6764),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Description = "",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cola",
                            ProductId = 4,
                            ProductTypeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6766),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Description = "",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sprite",
                            ProductId = 5,
                            ProductTypeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6768),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Description = "",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zatecky",
                            ProductId = 6,
                            ProductTypeId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6770),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Description = "",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lech",
                            ProductId = 7,
                            ProductTypeId = 1,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6651),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeName = "Pizza",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6655),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeName = "Drink",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6656),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeName = "Beer",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6400),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.RestaurantSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OpeningClosingSpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.ToTable("RestaurantSpecifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6527),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            Description = "Pizzeria na osiedlu",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pizzeria #1",
                            RestaurantId = 1,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6676),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeId = 1,
                            SizeName = "Small 26cm",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6678),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeId = 1,
                            SizeName = "Medium 32cm",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6680),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeId = 1,
                            SizeName = "Big 42cm",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6682),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeId = 2,
                            SizeName = "500ml",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6684),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeId = 2,
                            SizeName = "850ml",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6685),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeId = 3,
                            SizeName = "300ml",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2022, 10, 10, 2, 11, 15, 150, DateTimeKind.Local).AddTicks(6687),
                            CreatedBy = "ALICESMITH@EMAIL.COM",
                            MenuId = 1,
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductTypeId = 3,
                            SizeName = "500ml",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.WorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfEndWork")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfStartWork")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WorkHours")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("IngredientProductSpecification", b =>
                {
                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSpecificationsId")
                        .HasColumnType("int");

                    b.HasKey("IngredientsId", "ProductSpecificationsId");

                    b.HasIndex("ProductSpecificationsId");

                    b.ToTable("IngredientProductSpecification", (string)null);

                    b.HasData(
                        new
                        {
                            IngredientsId = 1,
                            ProductSpecificationsId = 1
                        },
                        new
                        {
                            IngredientsId = 2,
                            ProductSpecificationsId = 1
                        },
                        new
                        {
                            IngredientsId = 1,
                            ProductSpecificationsId = 2
                        },
                        new
                        {
                            IngredientsId = 2,
                            ProductSpecificationsId = 2
                        },
                        new
                        {
                            IngredientsId = 3,
                            ProductSpecificationsId = 2
                        },
                        new
                        {
                            IngredientsId = 4,
                            ProductSpecificationsId = 2
                        },
                        new
                        {
                            IngredientsId = 5,
                            ProductSpecificationsId = 2
                        },
                        new
                        {
                            IngredientsId = 1,
                            ProductSpecificationsId = 3
                        },
                        new
                        {
                            IngredientsId = 2,
                            ProductSpecificationsId = 3
                        },
                        new
                        {
                            IngredientsId = 4,
                            ProductSpecificationsId = 3
                        },
                        new
                        {
                            IngredientsId = 6,
                            ProductSpecificationsId = 3
                        });
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Client", b =>
                {
                    b.OwnsOne("FoodStoreMarket.Domain.ValueObjects.Adres", "Adres", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("FlatNumber")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("FoodStoreMarket.Domain.ValueObjects.PersonName", "PersonName", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Adres");

                    b.Navigation("PersonName");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.RestaurantSpecification", "RestaurantSpecification")
                        .WithMany("Employees")
                        .HasForeignKey("RestaurantSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodStoreMarket.Domain.ValueObjects.Adres", "Adres", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("FlatNumber")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("FoodStoreMarket.Domain.ValueObjects.PersonName", "PersonName", b1 =>
                        {
                            b1.Property<int>("EmployeeId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Adres");

                    b.Navigation("PersonName");

                    b.Navigation("RestaurantSpecification");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Ingredient", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Menu", "Menu")
                        .WithMany("Ingredients")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Menu", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Restaurant", "Restaurant")
                        .WithOne("Menu")
                        .HasForeignKey("FoodStoreMarket.Domain.Entities.Menu", "RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.OpeningClosingHours", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.OpeningClosingSpecification", "OpeningClosingSpecification")
                        .WithMany("OpeningClosingHours")
                        .HasForeignKey("OpeningClosingSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodStoreMarket.Domain.ValueObjects.Time", "ClosingTime", b1 =>
                        {
                            b1.Property<int>("OpeningClosingHoursId")
                                .HasColumnType("int");

                            b1.Property<int>("Hour")
                                .HasColumnType("int");

                            b1.Property<int>("Minute")
                                .HasColumnType("int");

                            b1.Property<int>("Secound")
                                .HasColumnType("int");

                            b1.HasKey("OpeningClosingHoursId");

                            b1.ToTable("OpeningClosingHours");

                            b1.WithOwner()
                                .HasForeignKey("OpeningClosingHoursId");
                        });

                    b.OwnsOne("FoodStoreMarket.Domain.ValueObjects.Time", "OpeningTime", b1 =>
                        {
                            b1.Property<int>("OpeningClosingHoursId")
                                .HasColumnType("int");

                            b1.Property<int>("Hour")
                                .HasColumnType("int");

                            b1.Property<int>("Minute")
                                .HasColumnType("int");

                            b1.Property<int>("Secound")
                                .HasColumnType("int");

                            b1.HasKey("OpeningClosingHoursId");

                            b1.ToTable("OpeningClosingHours");

                            b1.WithOwner()
                                .HasForeignKey("OpeningClosingHoursId");
                        });

                    b.Navigation("ClosingTime");

                    b.Navigation("OpeningClosingSpecification");

                    b.Navigation("OpeningTime");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.OpeningClosingSpecification", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.RestaurantSpecification", "RestaurantSpecification")
                        .WithOne("OpeningClosingSpecification")
                        .HasForeignKey("FoodStoreMarket.Domain.Entities.OpeningClosingSpecification", "RestaurantSpecificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("RestaurantSpecification");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Order", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FoodStoreMarket.Domain.ValueObjects.Adres", "Adres", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("FlatNumber")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Adres");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Product", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Menu", "Menu")
                        .WithMany("Products")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStoreMarket.Domain.Entities.ProductSpecification", "ProductSpecification")
                        .WithOne("Product")
                        .HasForeignKey("FoodStoreMarket.Domain.Entities.Product", "ProductSpecificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Menu");

                    b.Navigation("ProductSpecification");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.ProductSizeSpecification", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.ProductSpecification", "ProductSpecification")
                        .WithMany("ProductSizeSpecifications")
                        .HasForeignKey("ProductSpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodStoreMarket.Domain.Entities.Size", "Size")
                        .WithMany("ProductSizeSpecifications")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSpecification");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.ProductSpecification", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.ProductType", "ProductType")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.ProductType", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Menu", "Menu")
                        .WithMany("ProductTypes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.RestaurantSpecification", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Restaurant", "Restaurant")
                        .WithOne("RestaurantSpecification")
                        .HasForeignKey("FoodStoreMarket.Domain.Entities.RestaurantSpecification", "RestaurantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("FoodStoreMarket.Domain.ValueObjects.Adres", "Adres", b1 =>
                        {
                            b1.Property<int>("RestaurantSpecificationId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("FlatNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("RestaurantSpecificationId");

                            b1.ToTable("RestaurantSpecifications");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantSpecificationId");

                            b1.HasData(
                                new
                                {
                                    RestaurantSpecificationId = 1,
                                    City = "Lodz",
                                    Email = "PIZZERIA@GMAIL.COM",
                                    FlatNumber = "",
                                    HouseNumber = "1",
                                    PhoneNumber = "123456789",
                                    PostCode = "94-000",
                                    Street = "al.Politechniki"
                                });
                        });

                    b.Navigation("Adres");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Size", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Menu", "Menu")
                        .WithMany("Sizes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStoreMarket.Domain.Entities.ProductType", "ProductType")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.WorkingHours", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Employee", "Employee")
                        .WithMany("WorkingHours")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("IngredientProductSpecification", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStoreMarket.Domain.Entities.ProductSpecification", null)
                        .WithMany()
                        .HasForeignKey("ProductSpecificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("FoodStoreMarket.Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStoreMarket.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Employee", b =>
                {
                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("ProductTypes");

                    b.Navigation("Products");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.OpeningClosingSpecification", b =>
                {
                    b.Navigation("OpeningClosingHours");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.ProductSpecification", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("ProductSizeSpecifications");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.ProductType", b =>
                {
                    b.Navigation("ProductSpecifications");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("Menu");

                    b.Navigation("RestaurantSpecification");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.RestaurantSpecification", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("OpeningClosingSpecification");
                });

            modelBuilder.Entity("FoodStoreMarket.Domain.Entities.Size", b =>
                {
                    b.Navigation("ProductSizeSpecifications");
                });
#pragma warning restore 612, 618
        }
    }
}
